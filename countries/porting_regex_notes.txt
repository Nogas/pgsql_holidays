self\[date\(year, (.*), (.*1)\)] = name

t_holiday.datestamp := make_date(t_year, $1, $2);\n\t\tt_holiday.description := $3;\n\t\tRETURN NEXT t_holiday;

---

(\t+)self\[date\(year, (.*), (.*)\)\] = name

$1t_holiday.datestamp := make_date(t_year, $2, $3);\n$1RETURN NEXT t_holiday;

--

if year (.*):

IF t_year $1 THEN

--

elif year (.*):

ELSIF t_year $1 THEN

--

else:

ELSE

--

if (.*) <= year <= (.*):

IF t_year BETWEEN $1 AND $2 THEN

--

self[easter(year) + rd(days=-48)] = 'Dialuna di Carnaval [Carnaval Monday]'

(\t+)self\[easter\(year\) \+ rd\(days=(.*)\)\] = '(.*)'

$1t_holiday.datestamp := holidays.easter(t_year) + '$2 Days'::INTERVAL;\n$1t_holiday.description := '$3';\n$1RETURN NEXT t_holiday;

--

self[easter(year) + rd(weekday=FR(-1))] = 'Bierna Santo [Good Friday]'

(\t+)self\[easter\(year\) [\+\-] rd\(weekday=(.*)\((.*)\)\)\] = '(.*)'

$1t_holiday.datestamp := holidays.find_nth_weekday_date(holidays.easter(t_year), $2, $3);\n$1t_holiday.description := '$4';\n$1RETURN NEXT t_holiday;

--

name = ('.*')

t_holiday.description := $1;

--

jan26 = date(year, JAN, 26)

(\t+)(.*) = date\(year, (.*), (.*)\)

$1t_datestamp = make_date(t_year, $3, $4);

--
dt = date(year, JUN, 1) + rd(weekday=MO(+2))

= date\(year, (.*), (.*)\) \+ rd\(weekday=(.*)\((.*)\)\)

= find_nth_weekday_date(make_date(t_year, $1, $2), $3, $4);

--

if apr25.weekday() == SAT

if .*.weekday\(\) == (.*)

IF DATE_PART('dow', t_datestamp) = $1

--

self[jan1 + rd(weekday=MO)] = name + ' (Observed)'

(\t+)self\[.* \+ rd\(weekday=(.*)\)\] = (.*)

$1t_holiday.datestamp = find_nth_weekday_date(t_datestamp, $2, 1);\n$1t_holiday.description = $3;\n$1RETURN NEXT t_holiday;

--

self[date(year, MAR, 1) + rd(weekday=MO(+2))] = name

(\t+)self\[date\(year, (.*), (.*)\) \+ rd\(weekday=(.*)\((.*)\)\)\] = (.*)

$1t_holiday.datestamp = find_nth_weekday_date(make_date(t_year, $2, $3), $4, $5);\n$1t_holiday.description = $6;\n$1RETURN NEXT t_holiday;

--

self[date(year, MAR, 1) + rd(weekday=MO(+2))] = name
self[date(year, OCT, 1) + rd(weekday=MO)] = name

(\t+)self\[date\(year, (.*), (.*)\) \+ rd\(weekday=(.*)\)\] = (.*)

$1t_holiday.datestamp = find_nth_weekday_date(make_date(t_year, $2, $3), 1, $4);\n$1t_holiday.description = $5;\n$1RETURN NEXT t_holiday;

--

if date(year, JANUARY, 1).weekday()

(\t+)if date\(year, (.*), (.*)\).weekday\(\)

$1t_datestamp := make_date(t_year, $2, $3);\n$1IF DATE_PART('dow', t_datestamp)

--

t_holiday.datestamp := make_date(t_year, JANUARY, 6) + rd(weekday=MO);

t_holiday.datestamp := make_date\(t_year, (.*), (.*)\) \+ rd\(weekday=(.*)\);

t_holiday.datestamp := holidays.find_nth_weekday_date(make_date(t_year, $1, $2), $3, 1);

--

+ rd(days=+39)

([\+\-]) rd\(days=(.*)\)

$1 '$2 Days'::INTERVAL